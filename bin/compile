#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -e -o pipefail

mkdir -p "$1" "$2/oa2p"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir="$3"
this_dir=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)
gb_project_dir=$(cd $(dirname $this_dir) && pwd)

current_ver="$STACK $(cd $gb_project_dir && git rev-parse HEAD)"
cached_ver=""
if [[ -f "$cache/oa2p/ver" ]]; then
    cached_ver=$(cat "$cache/oa2p/ver")
fi

if [[ $current_ver != $cached_ver ]]; then
    go_bp="$cache/oa2p/go_bp" # heroku golang buildpack will live here
    go_bp_ver=v62
    go_bp_cached_ver=""
    if [[ -f "$cache/oa2p/go_bp.ver" ]]; then
        go_bp_cached_ver=$(cat "$cache/oa2p/go_bp.ver")
    fi

    if [[ $go_bp_ver != $go_bp_cached_ver ]]; then
        echo -n "-----> Preparing to build oauth2_proxy ..."
        mkdir -p "$go_bp"
        rm -rf "$go_bp/*"
        curl --show-error -sL https://api.github.com/repos/heroku/heroku-buildpack-go/tarball/$go_bp_ver \
        | tar xzf - --strip-components=1 -C "$go_bp"
        echo "$go_bp_ver" > "$cache/oa2p/go_bp.ver"
        echo " done"
    fi

    echo "-----> Building oauth2_proxy ..."
    # build oauth2_proxy using heroku go buildpack
    GOVERSION=go1.8 "$go_bp/bin/compile" "$gb_project_dir" "$cache/oa2p/go_bp_cache" "$env_dir"
    cp "$gb_project_dir/bin/oauth2_proxy" "$cache/oa2p/"
    echo "$current_ver" > "$cache/oa2p/ver"
fi

echo -n "-----> Installing oauth2_proxy ..."
mkdir -p "$build/.oa2p.d"
cp "$cache/oa2p/oauth2_proxy" "$build/.oa2p.d/"
cp "$this_dir/oa2p" "$build/.oa2p.d/"
echo " done"

mkdir -p "$build/.profile.d"
cat <<"EOF" > "$build/.profile.d/oa2p-profile.sh"
app_dir=$(pwd)
if [[ $(uname) != Darwin ]]; then
    # On a real dyno, $HOME points at the app directory
    app_dir=$HOME
fi
export PATH="$app_dir/.oa2p.d:$PATH"
EOF

if [[ -f $build/Procfile ]]; then
    echo "-----> Adding oa2p wrapper for web process type"
    sed -i -r "s/^web:\s*(.*)/web: oa2p \1/" $build/Procfile
fi
